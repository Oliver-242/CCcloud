// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: file.proto

#include "file.pb.h"
#include "file.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace CCcloud {

static const char* FileService_method_names[] = {
  "/CCcloud.FileService/Upload",
  "/CCcloud.FileService/Download",
  "/CCcloud.FileService/Delete",
};

std::unique_ptr< FileService::Stub> FileService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FileService::Stub> stub(new FileService::Stub(channel, options));
  return stub;
}

FileService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Upload_(FileService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_Download_(FileService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Delete_(FileService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientWriter< ::CCcloud::UploadChunk>* FileService::Stub::UploadRaw(::grpc::ClientContext* context, ::CCcloud::UploadResponse* response) {
  return ::grpc::internal::ClientWriterFactory< ::CCcloud::UploadChunk>::Create(channel_.get(), rpcmethod_Upload_, context, response);
}

void FileService::Stub::async::Upload(::grpc::ClientContext* context, ::CCcloud::UploadResponse* response, ::grpc::ClientWriteReactor< ::CCcloud::UploadChunk>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::CCcloud::UploadChunk>::Create(stub_->channel_.get(), stub_->rpcmethod_Upload_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::CCcloud::UploadChunk>* FileService::Stub::AsyncUploadRaw(::grpc::ClientContext* context, ::CCcloud::UploadResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::CCcloud::UploadChunk>::Create(channel_.get(), cq, rpcmethod_Upload_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::CCcloud::UploadChunk>* FileService::Stub::PrepareAsyncUploadRaw(::grpc::ClientContext* context, ::CCcloud::UploadResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::CCcloud::UploadChunk>::Create(channel_.get(), cq, rpcmethod_Upload_, context, response, false, nullptr);
}

::grpc::ClientReader< ::CCcloud::DownloadChunk>* FileService::Stub::DownloadRaw(::grpc::ClientContext* context, const ::CCcloud::DownloadRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::CCcloud::DownloadChunk>::Create(channel_.get(), rpcmethod_Download_, context, request);
}

void FileService::Stub::async::Download(::grpc::ClientContext* context, const ::CCcloud::DownloadRequest* request, ::grpc::ClientReadReactor< ::CCcloud::DownloadChunk>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::CCcloud::DownloadChunk>::Create(stub_->channel_.get(), stub_->rpcmethod_Download_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::CCcloud::DownloadChunk>* FileService::Stub::AsyncDownloadRaw(::grpc::ClientContext* context, const ::CCcloud::DownloadRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::CCcloud::DownloadChunk>::Create(channel_.get(), cq, rpcmethod_Download_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::CCcloud::DownloadChunk>* FileService::Stub::PrepareAsyncDownloadRaw(::grpc::ClientContext* context, const ::CCcloud::DownloadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::CCcloud::DownloadChunk>::Create(channel_.get(), cq, rpcmethod_Download_, context, request, false, nullptr);
}

::grpc::Status FileService::Stub::Delete(::grpc::ClientContext* context, const ::CCcloud::DeleteRequest& request, ::CCcloud::DeleteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CCcloud::DeleteRequest, ::CCcloud::DeleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Delete_, context, request, response);
}

void FileService::Stub::async::Delete(::grpc::ClientContext* context, const ::CCcloud::DeleteRequest* request, ::CCcloud::DeleteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CCcloud::DeleteRequest, ::CCcloud::DeleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

void FileService::Stub::async::Delete(::grpc::ClientContext* context, const ::CCcloud::DeleteRequest* request, ::CCcloud::DeleteResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CCcloud::DeleteResponse>* FileService::Stub::PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::CCcloud::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CCcloud::DeleteResponse, ::CCcloud::DeleteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Delete_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CCcloud::DeleteResponse>* FileService::Stub::AsyncDeleteRaw(::grpc::ClientContext* context, const ::CCcloud::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteRaw(context, request, cq);
  result->StartCall();
  return result;
}

FileService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileService_method_names[0],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< FileService::Service, ::CCcloud::UploadChunk, ::CCcloud::UploadResponse>(
          [](FileService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::CCcloud::UploadChunk>* reader,
             ::CCcloud::UploadResponse* resp) {
               return service->Upload(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< FileService::Service, ::CCcloud::DownloadRequest, ::CCcloud::DownloadChunk>(
          [](FileService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CCcloud::DownloadRequest* req,
             ::grpc::ServerWriter<::CCcloud::DownloadChunk>* writer) {
               return service->Download(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileService::Service, ::CCcloud::DeleteRequest, ::CCcloud::DeleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FileService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CCcloud::DeleteRequest* req,
             ::CCcloud::DeleteResponse* resp) {
               return service->Delete(ctx, req, resp);
             }, this)));
}

FileService::Service::~Service() {
}

::grpc::Status FileService::Service::Upload(::grpc::ServerContext* context, ::grpc::ServerReader< ::CCcloud::UploadChunk>* reader, ::CCcloud::UploadResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileService::Service::Download(::grpc::ServerContext* context, const ::CCcloud::DownloadRequest* request, ::grpc::ServerWriter< ::CCcloud::DownloadChunk>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileService::Service::Delete(::grpc::ServerContext* context, const ::CCcloud::DeleteRequest* request, ::CCcloud::DeleteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace CCcloud

